<appendix xml:id="modifyadschema">
<title>Appendix A: Extending the AD Schema</title>
<para>This appendix describes methods to extend the
Active Directory (AD) LDAP Schema</para>
<itemizedlist><para>This appendix covers the following topics:</para>
<listitem><para><xref linkend="modifyadschemaex"/></para>
</listitem><listitem><para><xref linkend="populateadusergroupobjectsex"/></para>
</listitem><listitem><para><xref linkend="modifynldapdirbasedmapping"/></para>
</listitem><listitem><para><xref linkend="modifynldapschemaex"/></para>
</listitem><listitem><para><xref linkend="populatenldapusergroupobjectsex"/></para>
</listitem>
</itemizedlist>
<task xml:id="modifyaddirbasedmapping"><title>How to Extend the Active Directory Schema, and User and Group Entries</title><tasksummary><para>This procedure shows how to extend the AD schema and populate the user and group objects with the associated Unix names.</para><note><para>Perform this task before enabling directory-based mapping on your illumos system.</para>
</note>
</tasksummary>
<procedure><step><para>(Optional) Extend the AD schema to add the new UNIX user and group attributes.</para>
<para>Many organizations have adopted <link xl:href="https://datatracker.ietf.org/doc/html/rfc2307">RFC 2307</link> or <link xl:href="https://datatracker.ietf.org/doc/html/draft-howard-rfc2307bis-01">rfc2307bis</link> schema extensions, which <command>idmap</command> supports.</para>
<note><para>If you do not want to extend the AD schema, you can use an existing AD schema attribute to store UNIX user and group name information. For instance, if you already have schema that is comparable to what is described in <xref linkend="modifyadschemaex"/>, you can use the existing attributes instead of creating new ones.</para>
</note>
<substeps><step><para>Create an LDAP Data Interchange Format (LDIF) file to describe the AD schema changes.</para><para>For sample LDIF file contents, see <xref linkend="modifyadschemaex"/>. Also see <citetitle>Extending Your Active Directory Schema in Windows Server</citetitle> and <citetitle>Step-by-Step Guide to Using Active Directory Schema and Display Specifiers</citetitle> on the <link xl:url="http://technet.microsoft.com/">Microsoft technet web site</link>.</para></step>
<step><para>Use the <command>ldifde</command> tool to load the schema changes into AD from the Windows server.</para><screen>C:\> <userinput>ldifde -v -i -f <replaceable>input-file</replaceable></userinput></screen>
</step>
</substeps>
</step>
<step><para>Use the <command>ldapmodify</command> command to populate the AD user and group objects with the new attributes and their values.</para>
<para>You can use the <command>idmap set-namemap</command> command to populate user and group objects. See <xref linkend="adddirmappingusertask"/> and <xref linkend="adddirmappinggrouptask"/>.</para><para>You can also use any of the Windows AD utilities to populate these objects.</para><substeps><step><para>Create an LDIF file to record the updates to the AD user and group objects.</para><para>See a sample LDIF file in <xref linkend="populateadusergroupobjectsex"/>. For more information about the LDIF file format, see <link xl:url="http://www.faqs.org/rfcs/rfc2849.html">RFC 2849</link>.</para>
</step><step><para>Use the <command>kinit</command> command to obtain a Kerberos ticket-granting ticket (TGT) for a privileged AD principal.</para><para>This principal will be used by the <command>ldapmodify</command> command to update the AD objects described in the file you created in the previous substep.</para><para>For example:</para><screen>$ <userinput>kinit Administrator</userinput>
Password for Administrator@EXAMPLE.COM: </screen>
</step><step><para>Use the <command>ldapmodify</command> command to update the user objects on the AD server.</para><screen>$ <userinput>ldapmodify -h <replaceable>AD-server-name</replaceable> -o mech=gssapi -o authzid='' -f <replaceable>input-file</replaceable></userinput></screen>
</step>
</substeps>
</step>
</procedure><example xml:id="modifyadschemaex"><title>Extending the AD Schema</title><para>The following LDIF example file, <filename>ad_namemap_schema.ldif</filename>, describes the AD schema changes:</para><screen>dn: CN=unixUserName, CN=Schema, CN=Configuration, DC=example, DC=com
changetype: add
attributeID: 1.3.6.1.4.1.42.2.27.5.1.60
attributeSyntax: 2.5.5.3
isSingleValued: TRUE
searchFlags: 1
lDAPDisplayName: unixUserName
adminDescription: This attribute contains the object's UNIX username
objectClass: attributeSchema
oMSyntax: 27

dn: CN=unixGroupName, CN=Schema, CN=Configuration, DC=example, DC=com
changetype: add
attributeID: 1.3.6.1.4.1.42.2.27.5.1.61
attributeSyntax: 2.5.5.3
isSingleValued: TRUE
searchFlags: 1
lDAPDisplayName: unixGroupName
adminDescription: This attribute contains the object's UNIX groupname
objectClass: attributeSchema
oMSyntax: 27

dn:
changetype: modify
add: schemaUpdateNow
schemaUpdateNow: 1
-

dn: CN=unixNameInfo, CN=Schema, CN=Configuration, DC=example, DC=com
changetype: add
governsID: 1.3.6.1.4.1.42.2.27.5.2.15
lDAPDisplayName: unixNameInfo
adminDescription: Auxiliary class to store UNIX name info in AD
mayContain: unixUserName
mayContain: unixGroupName
objectClass: classSchema
objectClassCategory: 3
subClassOf: top</screen><para>Use the <command>ldifde</command> tool to load the schema changes into AD from the Windows server:</para><screen>C:\> <userinput>ldifde -v -i -f ad_namemap_schema.ldif</userinput></screen>
</example><example xml:id="populateadusergroupobjectsex"><title>Populating AD User and Group Objects</title><para>The following example has Windows users <literal>terry</literal>, <literal>cal</literal>, and <literal>dana</literal> stored in Active Directory. These Windows users are associated with the Unix users <literal>tmw</literal>, <literal>crj</literal>, and <literal>dab</literal>, respectively.</para><para>This example shows how to add the Unix user names to the appropriate user objects in AD by using the <command>ldapmodify</command> command.</para><para>First, create an input file, <filename>updateUsers</filename>, that associates the Windows names with the Unix names:</para><screen>$ <userinput>cat updateUsers</userinput>
dn: CN=Terry Walters,CN=Users,DC=example,DC=com
changetype: modify
add: unixUserName
unixUserName: tmw

dn: CN=Cal Jamieson,CN=Users,DC=example,DC=com
changetype: modify
add: unixUserName
unixUserName: crj

dn: CN=Dana Bloom,CN=Users,DC=example,DC=com
changetype: modify
add: unixUserName
unixUserName: dab
$</screen><para>Next, use the <command>kinit</command> command to obtain a TGT for a privileged principal:</para><screen>$ <userinput>kinit Administrator</userinput>
Password for Administrator@EXAMPLE.COM: </screen><para>Finally, run the <command>ldapmodify</command> command to update the user objects on the AD server, <literal>saturn</literal>:</para><screen>$ <userinput>ldapmodify -h saturn -o mech=gssapi -o authzid='' -f updateUsers</userinput></screen>
</example>
</task><task xml:id="modifynldapdirbasedmapping"><title>How to Extend the Native LDAP Schema, and User and Group Entries</title><tasksummary><para>This procedure shows how to extend the native LDAP schema and populate the user and group objects with the associated Windows names.</para><note><para>Perform this task before enabling directory-based mapping on your illumos system.</para>
</note>
</tasksummary><procedure><step><para>(Optional) Extend the native LDAP schema to add the new Windows user and group attributes.</para><note><para>If you do not want to extend the native LDAP schema, you can use an existing native LDAP schema attribute to store Windows user and group name information. For instance, if you already have schema that is comparable to what is described in <xref linkend="modifynldapschemaex"/>, you can use your attributes instead of creating new ones.</para>
</note><substeps><step><para>Create an LDAP Data Interchange Format (LDIF) file to describe the native LDAP schema changes.</para><para>For sample LDIF file contents, see <xref linkend="modifynldapschemaex"/>.</para>
</step><step><para>Use the <command>ldapmodify</command> tool to load the schema changes into native LDAP.</para><screen>$ <userinput>ldapmodify -D cn=admin -w p -f <replaceable>input-file</replaceable></userinput></screen>
</step>
</substeps>
</step><step><para>Use the <command>ldapmodify</command> command to populate the native LDAP user and group objects with the new attributes and their values.</para><para>You can use the <command>idmap set-namemap</command> command to populate user and group objects. See <xref linkend="adddirmappingusertask"/> and <xref linkend="adddirmappinggrouptask"/>.</para><substeps><step><para>Create an LDIF file to record the updates to the native LDAP user and group objects.</para><para>See a sample LDIF file in <xref linkend="populatenldapusergroupobjectsex"/>. For more information about the LDIF file format, see <link xl:url="http://www.faqs.org/rfcs/rfc2849.html">RFC 2849</link>.</para>
</step><step><para>Use the <command>ldapmodify</command> command to update the user objects on the native LDAP server.</para><screen>$ <userinput>ldapmodify -h <replaceable>LDAP-server-name</replaceable> -o mech=gssapi -o authzid='' -f <replaceable>input-file</replaceable></userinput></screen>
</step>
</substeps>
</step>
</procedure><example xml:id="modifynldapschemaex"><title>Extending the Native LDAP Schema</title><para>The following LDIF example file, <filename>nldap_namemap_schema.ldif</filename>, describes the native LDAP schema changes:</para><screen>dn: cn=schema
changetype: modify
add: attributeTypes
attributeTypes: ( 1.3.6.1.4.1.42.2.27.5.1.62
   NAME 'winAccountName'
   DESC 'Windows user or group name corresponding to a Unix user or group'
   EQUALITY caseIgnoreMatch
   SUBSTRINGS caseIgnoreSubstringsMatch
   ORDERING caseIgnoreOrderingMatch
   SYNTAX 1.3.6.1.4.1.1466.115.121.1.15 )
-
add: objectClasses
objectClasses: ( 1.3.6.1.4.1.42.2.27.5.2.16
   NAME 'winAccount'
   DESC 'Auxiliary class to store Windows name mappings in Unix user/group objects'
   SUP top
   AUXILIARY
   MAY winAccountName )</screen><para>Use the <command>ldapmodify</command> tool to load the schema changes into native LDAP:</para><screen>$ <userinput>ldapmodify -D cn=admin -w - -f f nldap_namemap_schema.ldif</userinput>
Enter bind password:
modifying entry cn=schema</screen>
</example><example xml:id="populatenldapusergroupobjectsex"><title>Populating Native LDAP User and Group Objects</title><para>The following example has Unix users <literal>tmw</literal>, <literal>crj</literal>, and <literal>dab</literal> stored in native LDAP. These Unix users are associated with the Windows users <literal>terry</literal>, <literal>cal</literal>, and <literal>dana</literal>, respectively.</para><para>This example shows how to add the Windows user names to the appropriate user objects in native LDAP by using the <command>ldapmodify</command> command.</para><para>First, create an input file, <filename>updateUsers</filename>, that associates the Unix names with the Windows names:</para><screen>$ <userinput>cat updateUsers</userinput>
dn: uid=tmw,ou=passwd,dc=example,dc=com
changetype: modify
add: winAccountName
winAccountName: terry@example.com

dn: uid=crj,ou=passwd,dc=example,dc=com
changetype: modify
add: winAccountame
winAccountame: cal@example.com

dn: uid=dab,ou=passwd,dc=example,dc=com
changetype: modify
add: winAccountame
winAccountame: dana@example.com
$</screen><para>Then, run the <command>ldapmodify</command> command to update the user objects on the native LDAP server, <literal>neptune</literal>:</para><screen>$ <userinput>ldapmodify -h neptune -o mech=gssapi -o authzid='' -f updateUsers</userinput></screen>
</example>
</task>
</appendix>
